const searchIcon=document.querySelector("#search-icon"),hamburguerBtn=document.querySelector(".hamburguer"),brandSelect=document.querySelector("#brand"),yearSelect=document.querySelector("#year"),minPrice=document.querySelector("#min"),maxPrice=document.querySelector("#max"),doorsSelect=document.querySelector("#doors"),transmissionSelect=document.querySelector("#transmission"),colorSelect=document.querySelector("#color"),results=document.querySelector("#results"),searchData={year:"",brand:"",minPrice:"",maxPrice:"",doors:"",transmission:"",color:""};function startApp(){eventListeners(),showCars(cars),fillCarsSelects(cars),actualDate()}function eventListeners(){searchIcon.addEventListener("click",openSearchbar),hamburguerBtn.addEventListener("click",openNav),window.addEventListener("click",closeOutsideClick),window.addEventListener("scroll",colorHeaderScroll),brandSelect.addEventListener("change",e=>{const t=e.target.value;searchData.brand=t,filterCar()}),yearSelect.addEventListener("change",e=>{const t=e.target.value;searchData.year=t,filterCar()}),minPrice.addEventListener("change",e=>{const t=e.target.value;searchData.minPrice=t,filterCar()}),maxPrice.addEventListener("change",e=>{const t=e.target.value;searchData.maxPrice=t,filterCar()}),doorsSelect.addEventListener("change",e=>{const t=e.target.value;searchData.doors=t,filterCar()}),transmissionSelect.addEventListener("change",e=>{const t=e.target.value;searchData.transmission=t,filterCar()}),colorSelect.addEventListener("change",e=>{const t=e.target.value;searchData.color=t,filterCar()})}function openSearchbar(){const e=document.querySelector("#search-box");e.classList.toggle("search-box--active"),e.classList.toggle("search-box__contenedor")}function openNav(){document.querySelector(".nav").classList.toggle("nav--active")}function closeOutsideClick(e){const t=e.target,r=document.querySelector("#search-box"),a=document.querySelector(".nav");r.classList.contains("search-box--active")&&t!==searchIcon&&!r.contains(t)&&r.classList.remove("search-box--active","search-box__contenedor"),a.classList.contains("nav--active")&&t!==hamburguerBtn&&a.classList.remove("nav--active"),closeOnScroll(a,r)}function closeOnScroll(e,t){window.addEventListener("scroll",()=>{e.classList.remove("nav--active"),t.classList.remove("search-box--active","search-box__contenedor")})}function colorHeaderScroll(){const e=document.querySelector(".header"),t=window.scrollY;e.classList.toggle("header__bg",t>100)}function showCars(e){cleanHTML(),e.forEach(e=>{const{img:t,year:r,brand:a,model:n,price:c,doors:s,transmission:o}=e;let l=Math.floor(100*Math.random());const i=`\n        <picture>\n          <source srcset="${t}.avif" type="image/avif" />\n          <source srcset="${t}.webp" type="image/webp" />\n          <img\n            class="car__img"\n            loading="lazy"\n            width="500"\n            height="300"\n            src="${t}.jpg"\n            alt=""\n          />\n        </picture>\n        <span class="car__year">${r}</span>\n        <div class="car__content">\n          <h2 class="car__model">${a} ${n}</h2>\n          <p class="car__price">\n            $${c.toLocaleString()}\n            <i class="bx bxs-star car__price--reviews">(${l} Rese√±as)</i>\n          </p>\n          <p class="car__character">\n            <i class="bx bxs-door-open car__icon"></i>\n            ${s} Puertas\n          </p>\n          <p class="car__character">\n            <i class="bx bxs-car car__icon"></i>\n            ${o}\n          </p>\n          <div class="car__btns">\n            <a href="#" class="car__btn">Comprar</a>\n            <a href="#" class="car__details">Ver detalles</a>\n          </div>\n        </div>\n`,d=document.createElement("div");d.classList.add("car"),d.innerHTML=i,results.appendChild(d)})}function cleanHTML(){for(;results.firstChild;)results.removeChild(results.firstChild)}function fillCarsSelects(e){fillSelect(e.map(({brand:e})=>e).filter((e,t,r)=>r.indexOf(e)===t),brandSelect),fillSelect(e.map(({doors:e})=>e).filter((e,t,r)=>r.indexOf(e)===t),doorsSelect),fillSelect(e.map(({color:e})=>e).filter((e,t,r)=>r.indexOf(e)===t),colorSelect),fillYearSelect()}function fillYearSelect(){const e=(new Date).getFullYear(),t=e-10;for(let r=e;r>=t;r--){const e=createOption(r);yearSelect.appendChild(e)}}function fillSelect(e,t){e.forEach(e=>{const r=createOption(e);t.appendChild(r)})}function createOption(e){const t=document.createElement("option");return t.value=e,t.textContent=e,t}function filterCar(){const e=cars.filter(filterBrand).filter(filterCars);e.length?showCars(e):noResults()}function filterBrand(e){const{brand:t}=searchData;return t?e.brand===t:e}function filterCars(e){const{year:t,minPrice:r,maxPrice:a,doors:n,transmission:c,color:s}=searchData,o=!t||e.year===parseInt(t),l=!r||e.price>=r,i=!a||e.price<=a,d=!n||e.doors===parseInt(n),u=!c||e.transmission.toLowerCase()==c,m=!s||e.color===s;return o&&l&&i&&d&&u&&m}function noResults(){cleanHTML();const e=document.createElement("p");e.classList.add("alerta"),e.textContent="No se encontraron resultados, prueba de nuevo",results.appendChild(e)}function actualDate(){const e=document.querySelector(".footerDate");let t=(new Date).getFullYear();e.textContent=t}document.addEventListener("DOMContentLoaded",startApp);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
